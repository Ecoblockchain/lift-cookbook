Install and Running
-------------------

This chapter covers questions around starting development with Lift: running a first Lift application and setting up a development environment. You'll find answers regarding production deployment in <<deployment>>.

Downloading and Running Lift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^
You want to install and run Lift on your computer.

Solution
^^^^^^^^

The only prerequisite for installing and running Lift is to have Java
1.5 or later installed. Instructions for installing Java can be found at
http://java.com/[http://java.com/].

Once you have Java, the following instructions will download, build and
start a basic Lift application.

For Mac and Linux
+++++++++++++++++

* Visit http://liftweb.net/download[http://liftweb.net/download] and download the Lift 2.5-M3 Zip file.
* Unzip the file.
* Start Terminal or your favourite shell tool.
* Navigate into the unzipped folder and into the `scala_29` sub-folder and then the lift_basic` folder.
* Run:`./sbt`.
* Required libraries will be downloaded automatically.
* At the SBT prompt (>) type: `container:start`.
* Open your browser and go to `http://127.0.0.1:8080/`.
* When you're done, type `exit` at the SBT prompt to stop your application from running.

For Windows
+++++++++++

* Visit http://liftweb.net/download[http://liftweb.net/download] locate the link to the Zip version of Lift 2.5-M3 and save this to disk.
* Extract the contents of the Zip file.
* Navigate in Explorer to the extracted folder, and inside navigate into `scala_29` and then `lift_basic`. 
* Double click `sbt.bat` to run the build tool and a terminal window should open.
* Required libraries will be downloaded automatically.
* At the SBT prompt (>) type: `container:start`.
* You may find Windows Firewall blocking Java from running. If so, opt to "allow access".
* Start your browser and go to `http://127.0.0.1:8080/`
* When you're done, type `exit` at the SBT prompt to stop your application from running.

Expected result
+++++++++++++++

The result of the above commands should be a basic Lift application running on
your computer:

image::images/App%20Home.png[]


Discussion
^^^^^^^^^^

Lift isn't installed in the usual sense of "installing software".
Instead you use standard build tools, such as SBT or Maven, to assemble your application with the Lift framework. In this recipe we downloaded a ZIP file containing four fairly minimal Lift applications, and then started one of them via the build tool.

Typing `sbt` starts the Simple Build Tool, a dependency management
tool used by Scala projects (it's not specific to Lift).  SBT will check the project definition and download any libraries required, which includes the Lift framework.

This download happens once, and the downloaded
files are stored on disk in a `.ivy2` in your home folder.

Your application build is configured by `build.sbt`.  Looking inside you'll see:

* basic information about your application, including a name and version;
* resolvers, which inform SBT where to fetch dependencies from;
* settings for plugins and the Scala compiler; and
* a list of dependencies required to run your application, which will include the Lift framework.

The command `container:start` starts the web server on the default port of 8080 and
passes requests to the Lift application. The word "container" refers to the
software you deploy your application into. There are a variety of containers (Jetty and 
Tomcat are probably the best known) all of which conform to a standard for deployment.  
The upshot is you can build your application and deploy to whichever one you prefer.  
The `container:start` command uses Jetty.

The source code of the application resides in `src/main/webapp` and `src/main/scala`.

See Also
^^^^^^^^

The Simple Build Tool documentation is at http://www.scala-sbt.org[http://www.scala-sbt.org].


[[texteditor]]
Developing Using a Text Editor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to develop your Lift application using your favourite text
editor, hitting reload in your browser to see changes.

Solution
^^^^^^^^

Run SBT while you are editing, and ask it to detect and compile changes to Scala files.  To do that, start `sbt` and enter the following to the SBT prompt:

--------------------------------------
~; container:start; container:reload /
--------------------------------------

When you save a source file in your editor, SBT will detect this,
compile the file, and reload the web container.

Discussion
^^^^^^^^^^

An SBT command prefixed with `~` makes that command run when files
change. The first semicolon introduces a sequence of commands, where if
the first command succeeds, the second will run. The second semicolon
means the `reload` command will run if the `start` command ran OK. The `start` 
command will recompile any Scala source files that have changed.

When you run SBT in this way, you'll notice the following output:

----------------------------------------------------------
1. Waiting for source changes... (press enter to interrupt)
-----------------------------------------------------------

And indeed, if you do press enter in the SBT window you'll exit this "triggered
execution" mode and SBT will no longer be looking for file changes. However, while
SBT is watching for changes, the output will indicate when this happens with something 
that looks a little like this:

----------------------------------------------------------------------------------
[info] Compiling 1 Scala source to target/scala-2.9.1/classes...
[success] Total time: 1 s, completed 15-Nov-2012 18:14:46
[pool-301-thread-4] DEBUG net.liftweb.http.LiftServlet - Destroyed Lift handler.
[info] stopped o.e.j.w.WebAppContext{/,[src/main/webapp/]}
[info] NO JSP Support for /, did not find org.apache.jasper.servlet.JspServlet
[info] started o.e.j.w.WebAppContext{/,[src/main/webapp/]}
[success] Total time: 0 s, completed 15-Nov-2012 18:14:46
2. Waiting for source changes... (press enter to interrupt)
----------------------------------------------------------------------------------

Edits to HTML files don't trigger the SBT compile and reload commands.
This is because SBT's default behaviour is to look for
Scala and Java source file changes, and changes to files in `src/main/resources`. 
This works out just fine, because Jetty will use your modified HTML file when you 
reload the browser page.

Restarting the web container each time you edit a Scala file isn't ideal. You can reduce
the need for restarts by integrating JRebel into your development environment, as described
in <<jrebel>>.

However, if you are making a serious number of edits, you may prefer to issue a `container:stop` command until you're ready to run you application again with `container:start` to prevent SBT compiling and restarting your application. The SBT console has a command history, and using the up and down keyboard arrows allows you to navigate to previous commands and run them by pressing the return key.  That takes some of the tedium out of these long commands.

One error you may run into is:

------------------------------------------
java.lang.OutOfMemoryError: PermGen space
------------------------------------------

The "permanent generation" is a Java virtual machine concept. It's the area of memory used for storing classes amongst other things.  It's a fixed size and once it is full this PermGen error appears.  As you might imagine, continually restarting a container causes many classes to be loaded and unloaded, but the process is not perfect, effectively leaking memory. The best you can do is stop and then restart SBT.  If you're seeing this error often, check the setting for `-XX:MaxPermSize` inside the `sbt` (or `sbt.bat`) script, and if you can, double it.

See Also
^^^^^^^^

There's more about triggered execution at http://www.scala-sbt.org/release/docs/Detailed-Topics/Triggered-Execution[http://www.scala-sbt.org/release/docs/Detailed-Topics/Triggered-Execution].

Reference for the core SBT command line: http://www.scala-sbt.org/release/docs/Detailed-Topics/Command-Line-Reference[http://www.scala-sbt.org/release/docs/Detailed-Topics/Command-Line-Reference].

Command reference for the web plugin for SBT is at: https://github.com/siasia/xsbt-web-plugin/wiki[https://github.com/siasia/xsbt-web-plugin/wiki].


[[jrebel]]
Incorporating JRebel
~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to avoid application restarts when you change a Scala source file by using JRebel.

Solutions
^^^^^^^^^

There are three steps required: install JRebel once; each year request the free Scala license; and configure SBT to use JRebel.

First, visit the http://zeroturnaround.com/software/jrebel/[http://zeroturnaround.com/software/jrebel/] and request the free Scala license.  

Second, download the "Generic ZIP Archive" version of JRebel, unzip it to where you like. For this recipe I've chosen to use `/opt/zt/jrebel/`.  

When your have received your account confirmation email from JRebel, you can copy your "authentication token" from the "Active" area of ZeroTurnaround's site. To apply the token to your local install, run the JRebel configuration script:

---------------------------------------
$ /opt/zt/jrebel/bin/jrebel-config.sh 
---------------------------------------

For Windows navigate to and launch `bin\jrebel-config.cmd`.

In the "Activation" setting select "I want to use myJRebel" and then in the "License" section paste in your activation token. Click the "Activate" button, and once you see the license status change to "You have a valid myJRebel token..." click "Finish".  

Finally, configure SBT by modifying the `sbt` script to enable JRebel.  This means setting the `-javaagent` and `-noverify` flags for Java, and enabling the JRebel Lift plugin. 

For Mac and Linux, the script that's included with the Lift downloads would become:

--------------------------
java -Drebel.lift_plugin=true -noverify -javaagent:/opt/zt/jrebel/jrebel.jar -Xmx1024M -Xss2M -XX:MaxPermSize=512m -XX:+CMSClassUnloadingEnabled -jar `dirname $0`/sbt-launch-0.12.jar "$@"
--------------------------

For Windows, modify `sbt.bat` to be:

--------------------------
set SCRIPT_DIR=%~dp0
java -Drebel.lift_plugin=true -noverify -javaagent:c:/opt/zt/jrebel/jrebel.jar -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -Xmx1024M -Xss2M -jar "%SCRIPT_DIR%\sbt-launch-0.12.jar" %*
--------------------------

There's nothing else to do to use JRebel.  When you start SBT you'll see a large banner starting something like this:

---------------------------
2012-12-16 23:00:32] #############################################################
[2012-12-16 23:00:32] 
[2012-12-16 23:00:32]  JRebel 5.1.1 (201211271929)
[2012-12-16 23:00:32]  (c) Copyright ZeroTurnaround OU, Estonia, Tartu.
[2012-12-16 23:00:32] 
[2012-12-16 23:00:32]  Over the last 30 days JRebel prevented 
[2012-12-16 23:00:32]  at least 335 redeploys/restarts saving you about 13.6 hours.
....
---------------------------

With JRebel installed, you can now `container:start` your application, modify and compile a Scala file and reload a page in your application. You'll see a notice that the class has been reloaded:

-------------------------------------------------------------------------
[2012-12-16 23:15:44] JRebel: Reloading class 'code.snippet.HelloWorld'.
-------------------------------------------------------------------------

That change is live, without having to restart the container. 

Discussion
^^^^^^^^^^

JRebel is very likely to speed up your development. It updates code in a running Java virtual machine, without having to stop it or start it.  The effect is that, on the whole, you can compile a class, then hit reload in your browser to see the change in your Lift application. 

Even with JRebel you will need to restart your applications from time to time, but JRebel usually reduces the number of restarts. For example, `Boot.scala` is run when your application starts, so if you modify something in your `Boot.scala` you'll need to start and start your application. JRebel can't help with that.

But there are also other situations that JRebel cannot help with, such as when a superclass changes. Generally, JRebel will emit a warning about this in the console window.  If that happens, stop and start your application.

The `-Drebel.lift_plugin=true` setting adds Lift-specific functionality to JRebel.  Specifically, it allows JRebel to reload changes to `LiftScreen`, `Wizard` and `RestHelper`s. This means you can change fields or screens, and change REST `serve` code. 


Purchased licenses
++++++++++++++++++

This recipe used a free Scala license for a service called myJRebel. This communicates with JRebel servers via the activation code.  If you have purchased a license from ZeroTurnaround, the situation is slightly different.  In this case, you will have a license key which you store in a file. You can place the file, `jrebel.lic` in your `/opt/zt/jrebel/` folder, but you may prefer to keep it separate from your installation.  To do that, modify the `sbt` script and specify the location of the file by adding another Java setting:

-----------------------------------
-Drebel.license=/path/to/jrebel.lic
-----------------------------------


See Also
^^^^^^^^

You'll find details about how JRebel works in the FAQ at: http://zeroturnaround.com/software/jrebel/resources/faq/[http://zeroturnaround.com/software/jrebel/resources/faq/].

The Lift support was announced in a blog post in 2012 at http://zeroturnaround.com/jrebel/lift-support-in-jrebel/[http://zeroturnaround.com/jrebel/lift-support-in-jrebel/], where you'll find more about the capabilities of the plugin.


Developing using Eclipse
~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to develop your Lift application using the Eclipse IDE, hitting
reload in your browser to see changes.

Solution
^^^^^^^^

Use the "Scala IDE for Eclipse" plugin to Eclipse. The instructions for this 
are given at http://scala-ide.org[http://scala-ide.org]. We recommend the
stable version. This will give you an Eclipse perspective that knows about Scala.

To create the project files to allow Eclipse to load your Lift project, install "sbteclipse" by adding the following to `projects/plugins.sbt`:

-----------------------------------------------------------------------
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.1.0")
-----------------------------------------------------------------------

You can then create Eclipse project files (`.project` and `.classpath`) within SBT by entering the
following:

------- 
eclipse
-------

Open the project in Eclipse by navigating to "File > Import.." and select "General > Existing
Projects into Workspace". Browse to, and select, your Lift project. You
are now set up to develop your application in Eclipse.


To see live changes as you edit and save your work, run SBT in a separate terminal window.  That is, start `sbt` from a terminal window outside of Eclipse and enter the following:

--------------------------------------
~; container:start; container:reload /
--------------------------------------

This behaviour of this command is described in <<texteditor>>, but if you're using JRebel (see <<jrebel>>) then you just need to run `container:start` by itself.

You can then edit in Eclipse, save to compile, and in your web browser hit reload to see
the changes. 

Discussion
^^^^^^^^^^

One of the great benefits of an IDE is the ability to navigate source, by cmd+click (Mac) or F3 (PC).
You can ask the SBT `eclipse` command to download the Lift
source and Scaladoc, allowing you to click through to the Lift source from
methods and classes, which is a useful way to discover more about Lift.

To achieve this in a project, run `eclipse with-source=true`, but if you want 
this to be the default behaviour, add the following to your `build.sbt` file:

------------------------------
EclipseKeys.withSource := true
------------------------------

If you find yourself using the plugin frequently, you may wish to declare it
in your global SBT configuration files so it appies to all projects.  To do that,
create a `~/.sbt/plugins/plugins.sbt` file containing:

------------------------------------------------------------------------
resolvers += Classpaths.typesafeResolver

addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.1.0")
------------------------------------------------------------------------

Note the blank line between the `resolvers` and the `addSbtPlugin` is significant to SBT.

Finally, set any global configurations (such as `withSource`) `in `~/.sbt/global.sbt`.

See Also
^^^^^^^^

There are other useful settings for sbteclipse, described at https://github.com/typesafehub/sbteclipse/wiki[https://github.com/typesafehub/sbteclipse/wiki].

The SBT guide to using plugins, http://www.scala-sbt.org/release/docs/Getting-Started/Using-Plugins[http://www.scala-sbt.org/release/docs/Getting-Started/Using-Plugins] and the wiki page for global configuration, http://www.scala-sbt.org/release/docs/Detailed-Topics/Global-Settings[http://www.scala-sbt.org/release/docs/Detailed-Topics/Global-Settings], explains the `~/.sbt/` structure for SBT.



Viewing the lift_proto H2 Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You're developing using the default `lift_proto.db` H2 database, and
you would like use a tool to look at the tables.

Solution
^^^^^^^^

Use the web interface included as part of H2. Here are the steps:

* Locate the H2 JAR file. For me, this was: `~/.ivy2/cache/com.h2database/h2/jars/h2-1.2.147.jar`.
* Start the server from a terminal window using the JAR file you found: `java -cp /path/to/h2-version.jar org.h2.tools.Server`
* This should launch your web browser, asking you to login.
* Select "Generic H2 Server" in "Saved Settings".
* Enter `jdbc:h2:/path/to/youapp/lift_proto.db;AUTO_SERVER=TRUE` for "JDBC URL", adjusting the path for the location of your database, and adjusting the name of the database ("lift_proto.db") if different in your `Boot.scala`.
* Press "Connect" to view and edit your database.

Discussion
^^^^^^^^^^

The default Lift projects that include a database, such as `lift_basic`, use the H2 relational database as it can be included as an SBT dependency and requires no external installation or configuation. It's a fine product, althogh production deployments typically use standalone databases, such as PostgreSQL or MySQL.

Even if you're deploying to a non-H2 database it may be useful to keep H2 around because it has an in-memory mode, which is great for unit tests. This means you can create a database in-memory, no files on disk, and throw it away when your unit tests ends.

If you don't like the web interface, the connection settings described in this recipie should give you the information you need to configure other SQL tools.

See Also
^^^^^^^^

The properties of H2 are described at  http://www.h2database.com[http://www.h2database.com].

If you're using the console frequently, consider mapping it accessible from your Lift application in development node.  This is described by Diego Medina in a blog post at https://fmpwizard.telegr.am/blog/lift-and-h2[https://fmpwizard.telegr.am/blog/lift-and-h2].



Using the latest Lift build
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to use the latest build ("snapshot") of Lift.

Solution
^^^^^^^^

You need to make two changes to your `build.sbt` file. First, reference
the snapshot repository:

----
resolvers += "snapshots" at "http://oss.sonatype.org/content/repositories/snapshots"
----

Second, change the `liftVersion` in your build to be 2.5-SNAPSHOT,
rather than 2.4:

--------------------------------
val liftVersion = "2.5-SNAPSHOT"
--------------------------------

Restarting SBT (or issuing a `reload` command) will trigger a download
of the latest build.

Discussion
^^^^^^^^^^

Production releases of Lift (e.g., "2.4"), as well as milestone releases
(e.g., "2.4-M1") and release candidates (e.g., "2.4-RC1") are published
into a releases repository. When SBT downloads them, they are downloaded
once.

Snapshot releases are different: they are the result of an automated
build, and change often. You can force SBT to resolve the latest
versions by running the command `clean` and then `update`.

See Also
^^^^^^^^

To learn the detail of SNAPSHOT versions, dig into the Maven Complete Reference at [http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-pom-syntax.html[http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-pom-syntax.html].

Using a New Version of Scala
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Problem
^^^^^^^

A new Scala version has just been released and you want to immediately
use it in your Lift project.

Solution
^^^^^^^^

You may find that the latest SNAPSHOT of Lift is built using the latest
Scala version. Failing that, and assuming you cannot wait for a build,
providing that the Scala version is binary compatible with the latest
version used by Lift, you can change your build file to force the Scala
version.

For example, assuming your `build.sbt` file is set up to use Lift 2.4
with Scala 2.9.1:

---------------------------------------------------------------------
scalaVersion := "2.9.1"

libraryDependencies ++= {
  val liftVersion = "2.4" 
  Seq(
    "net.liftweb" %% "lift-webkit" % liftVersion % "compile->default"
  )    
}
---------------------------------------------------------------------

Let's assume that you now want to use Scala 2.9.2 but Lift 2.4 was only
built against Scala 2.9.1. Replace `%%` with `%` for the `net.liftweb`
resources and explicitly include the Scala version that Lift was built
against for each Lift component:

--------------------------------------------------------------------------
scalaVersion := "2.9.2"

libraryDependencies ++= {
  val liftVersion = "2.4" 
  Seq(
    "net.liftweb" % "lift-webkit_2.9.1" % liftVersion % "compile->default"
  )    
}
--------------------------------------------------------------------------

Discussion
^^^^^^^^^^

In the example we have forced SBT to explicitly fetch the 2.9.1 version
of the Lift resources rather than allow it to compute the URL to the
Lift components.  This is the difference between using `%%` in a
dependency and `%`.

Please note this only works for minor releases of Scala: major releases
break compatibility.  For example Scala 2.9.1 is compatible with Scala 2.9.0, but not 2.10.

See Also
^^^^^^^^

Binary compatibily in Scala is discussed on the Scala user mailing list at  
http://article.gmane.org/gmane.comp.lang.scala.user/39290[http://article.gmane.org/gmane.comp.lang.scala.user/39290].

The SBT behaviour is described at: http://www.scala-sbt.org/release/docs/Getting-Started/Library-Dependencies[http://www.scala-sbt.org/release/docs/Getting-Started/Library-Dependencies].

