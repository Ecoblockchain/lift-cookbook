Install and Running
-------------------

This chapter covers questions around starting development with Lift.
You'll find hints about production deployment in later chapters.

Downloading and Running Lift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to install and run Lift on your computer.

Solution
^^^^^^^^

The only prerequisite for installing and running Lift is to have Java
1.5 or later installed. Instructions for installing Java can be found at
http://java.com/en/download/manual.jsp[http://java.com/en/download/manual.jsp].

Once you have Java, the following instructions will download, build and
start a basic Lift application.

For Mac and Linux
+++++++++++++++++

* Visit http://liftweb.net/download[http://liftweb.net/download] and download the Lift 2.5-M3 Zip file.
* Unzip the file.
* Start Terminal or your favourite shell tool.
* Navigate into the unzipped folder and into the `scala_29` sub-folder and then the lift_basic` folder.
* Run:`./sbt`.
* Required libraries will be downloaded automatically.
* At the SBT prompt (>) type: `container:start`.
* Open your browser and go to `http://127.0.0.1:8080/`.
* When you're done, type `exit` at the SBT prompt to stop your application from running.

For Windows
+++++++++++

* Visit http://liftweb.net/download[http://liftweb.net/download] locate the link to the Zip version of Lift 2.5-M3 and save this to disk.
* Extract the contents of the Zip file.
* Navigate in Explorer to the extracted folder, and inside navigate into `scala_29` and then `lift_basic`. 
* Double click `sbt.bat` to run the build tool and a terminal window should open.
* Required libraries will be downloaded automatically.
* At the SBT prompt (>) type: `container:start`.
* You may find Windows Firewall blocking Java from running. If so, opt to "allow access".
* Start your browser and go to `http://127.0.0.1:8080/`
* When you're done, type `exit` at the SBT prompt to stop your application from running.

Expected result
+++++++++++++++

The result of the above commands should be a basic Lift application running on
your computer:

image::images/App%20Home.png[]


Discussion
^^^^^^^^^^

Lift isn't installed in the usual sense of "installing software".
Instead it uses standard build tools, such as SBT or Maven, to assemble
your application with the Lift framework. This recipe has
downloaded a Zip containing four fairly minimal Lift applications, and then started 
one of them via the build tool.

Typing `sbt` starts the Simple Build Tool, a dependency management
tool used by Scala projects. It will check the project definition and download any
libraries required by this Lift application. This download happens once and the downloaded
files are stored on disk in a `.ivy2` in your home folder.

The command `container:start` starts the web server on the default port of 8080 and
passes requests to the Lift application. The word "container" refers to the
software you deploy your application into. There are a variety of containers (Jetty and 
Tomcat are probably the best known) all of which conform to a standard for deployment.  
The upshot is you can build your application and deploy to whichever one you prefer.  
The `container:start` command uses Jetty.

Your application build is configured by `build.sbt`.  Looking inside you'll see:

* basic information about your application, including a name and version;
* resolvers, which inform SBT where to fetch dependencies from;
* settings for plugins and the Scala compiler; and
* a list of dependencies required to run your application on Lift.

The source code of the application resides in `src/main/webapp` and `src/main/scala`.

See Also
^^^^^^^^

The Simple Build Tool documentation is at http://www.scala-sbt.org[http://www.scala-sbt.org].


[[texteditor]]
Developing Using a Text Editor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to develop your Lift application using your favourite text
editor, hitting reload in your browser to see changes.

Solution
^^^^^^^^

Run SBT while you are editing to allow it to handle compilation of Scala files.

Start `sbt` and enter the following to the SBT prompt:

--------------------------------------
~; container:start; container:reload /
--------------------------------------

When you save a source file in your editor, SBT will detect this,
compile the file, and reload the web container.

Discussion
^^^^^^^^^^

An SBT command prefixed with `~` makes that command run when files
change. The first semicolon introduces a sequence of commands, where if
the first command succeeds, the second will run. The second semicolon
means the `reload` command will run if the `start` command ran OK. The `start` 
command will recompile any Scala source files that have changed.

When you run SBT in this way, you'll notice the following output:

----------------------------------------------------------
1. Waiting for source changes... (press enter to interrupt)
-----------------------------------------------------------

And indeed, if you do press enter in the SBT window you'll exit this "triggered
execution" mode and SBT will no longer be looking for file changes. However, while
SBT is watching for changes, the output will indicate when this happens with something 
that looks a little like this:

----------------------------------------------------------------------------------
[info] Compiling 1 Scala source to target/scala-2.9.1/classes...
[success] Total time: 1 s, completed 15-Nov-2012 18:14:46
[pool-301-thread-4] DEBUG net.liftweb.http.LiftServlet - Destroyed Lift handler.
[info] stopped o.e.j.w.WebAppContext{/,[src/main/webapp/]}
[info] NO JSP Support for /, did not find org.apache.jasper.servlet.JspServlet
[info] started o.e.j.w.WebAppContext{/,[src/main/webapp/]}
[success] Total time: 0 s, completed 15-Nov-2012 18:14:46
2. Waiting for source changes... (press enter to interrupt)
----------------------------------------------------------------------------------

Restarting the web container each time you edit a Scala file isn't ideal. You can reduce
the need for restarts by integrating JRebel into your development environment, as described
in <<jrebel>>.

Edits to HTML files don't trigger the SBT compile and reload commands.
This is because SBTs default behaviour is to look for
Scala and Java source file changes, and changes to files in `src/main/resources'. 
However, this is fine because Jetty will use your modified HTML file when you reload the browser page.


See Also
^^^^^^^^

* There's more about triggered execution at http://www.scala-sbt.org/release/docs/Detailed-Topics/Triggered-Execution[http://www.scala-sbt.org/release/docs/Detailed-Topics/Triggered-Execution].

* Reference for the core SBT command line: http://www.scala-sbt.org/release/docs/Detailed-Topics/Command-Line-Reference[http://www.scala-sbt.org/release/docs/Detailed-Topics/Command-Line-Reference].

* Command reference for the web plugin for SBT: https://github.com/siasia/xsbt-web-plugin/wiki[https://github.com/siasia/xsbt-web-plugin/wiki].


[[jrebel]]
Incorporating JRebel
~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to avoid container restarts when you change a Scala source file by using JRebel.

Solutions
^^^^^^^^^

TODO

Discussion
^^^^^^^^^^

TODO

See Also
^^^^^^^^

ALSO TODO



Developing using Eclipse
~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to develop your Lift application using the Eclipse IDE, hitting
reload in your browser to see changes.

Solution
^^^^^^^^

Use the "Scala IDE for Eclipse" plugin to Eclipse. The instructions for this 
are given at http://scala-ide.org[http://scala-ide.org]. We recommend the
stable version. This will give you an Eclipse perspective that knows about Scala.

To create the project files for Eclipse to read, install "sbteclipse" by adding the following to
`projects/plugins.sbt`:

-----------------------------------------------------------------------
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.1.0")
-----------------------------------------------------------------------

You can then create Eclipse project files (`.project` and `.classpath`) within SBT by entering the
following:

------- 
eclipse
-------

In Eclipse, navigate to "File > Import.." and select "General > Existing
Projects into Workspace". Navigate to and select your Lift project. You
are now set up to develop your application in Eclipse.

Run SBT while you are editing to handle reloads of the web container.
Start `sbt` from a terminal window outside of Eclipse and enter the
following:

--------------------------------------
~; container:start; container:reload /
--------------------------------------

This command is described in <<texteditor>>.

You can then edit in Eclipse, save to compile, and in your web browser hit reload to see
the change. 

Discussion
^^^^^^^^^^

You can also force the SBT `eclipse` command to download the Lift
source and Scaladoc. This will allow you to click through to the Lift source from
methods and classes, which is a useful way to discover more about Lift.
To achieve this in a project, run `eclipse with-source=true`, but if you want 
this to be the default behaviour, add the following to your `build.sbt` file:

------------------------------
EclipseKeys.withSource := true
------------------------------

If you find yourself using the plugin frequently, you may wish to declare it
in your global SBT configuration files so it appies to all projects.  To do that,
create a `~/.sbt/plugins/plugins.sbt` file containing:

------------------------------------------------------------------------
resolvers += Classpaths.typesafeResolver

addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.1.0")
------------------------------------------------------------------------

Note the blank line between the `resolvers` and the `addSbtPlugin` is significant to SBT.

Finally, set any global configurations (such as `withSource`) `in `~/.sbt/global.sbt`.

See Also
^^^^^^^^

There are other useful settings for sbteclipse, described at https://github.com/typesafehub/sbteclipse/wiki[https://github.com/typesafehub/sbteclipse/wiki].

The SBT guide to using plugins, http://www.scala-sbt.org/release/docs/Getting-Started/Using-Plugins[http://www.scala-sbt.org/release/docs/Getting-Started/Using-Plugins] and the wiki page for global configuration, http://www.scala-sbt.org/release/docs/Detailed-Topics/Global-Settings[http://www.scala-sbt.org/release/docs/Detailed-Topics/Global-Settings], explains the `~/.sbt/` structure for SBT.



Viewing the lift_proto H2 Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You're developing using the default `lift_proto.db` H2 database, and
you'd like use a tool to look at the tables.

Solution
^^^^^^^^

Use the web interface included as part of H2, as documented in the first _See Also_ link. +
Here are the steps:

* Locate the H2 JAR file. For me, this was: `~/.ivy2/cache/com.h2database/h2/jars/h2-1.2.147.jar`.
* Start the server from a terminal window using the JAR file you found: `java -cp /path/to/h2-version.jar org.h2.tools.Server`
* This should launch your web browser, asking you to login.
* Select "Generic H2 Server" in "Saved Settings".
* Enter `jdbc:h2:/path/to/youapp/lift_proto.db;AUTO_SERVER=TRUE` for "JDBC URL", adjusting the path for the location of your database, and adjusting the name of the database ("lift_proto.db") if different in your `Boot.scala`.
* Press "Connect" to view and edit your database.

Discussion
^^^^^^^^^^

Using the connection information given here and in the links below, you
should be able to configure other SQL tools to access the database.

See Also
^^^^^^^^

* https://fmpwizard.telegr.am/blog/lift-and-h2[H2 web console and Lift] from @fmpwizard.
* http://sofoklis.posterous.com/viewingediting-h2-database-via-web-interface[Viewing/Editing H2 database via web interface] blog post.
* https://groups.google.com/forum/?fromgroups#!topic/liftweb/Gna1OTha-MI[Default username/password for lift_proto.db] mailing list discussion.
* Mailing list discussion on
https://groups.google.com/forum/?fromgroups#!topic/liftweb/4Tvfu9859e0[Easiest way to set up H2 database with web console at localhost:8080/console].
* H2's http://www.h2database.com/html/tutorial.html[tutorial page].



Using the latest Lift build
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to use the latest build ("snapshot") of Lift.

Solution
^^^^^^^^

You need to make two changes to your `build.sbt` file. First, reference
the snapshot repository:

----
resolvers += "snapshots" at "http://oss.sonatype.org/content/repositories/snapshots"
----

Second, change the `liftVersion` in your build to be 2.5-SNAPSHOT,
rather than 2.4:

--------------------------------
val liftVersion = "2.5-SNAPSHOT"
--------------------------------

Restarting SBT (or issuing a `reload` command) will trigger a download
of the latest build.

Discussion
^^^^^^^^^^

Production releases of Lift (e.g., "2.4"), as well as milestone releases
(e.g., "2.4-M1") and release candidates (e.g., "2.4-RC1") are published
into a releases repository. When SBT downloads them, they are downloaded
once.

Snapshot releases are different: they are the result of an automated
build, and change often. You can force SBT to resolve the latest
versions by running the command `clean` and then `update`.

See Also
^^^^^^^^

* https://github.com/harrah/xsbt/wiki/Resolvers[SBT Resolvers].
* Learn about SNAPSHOT versioning in
http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-pom-syntax.html[Maven: The Complete Reference].
* https://github.com/harrah/xsbt/wiki/Command-Line-Reference[SBT Command
line reference]. Using a new version of Scala


Using a New Version of Scala
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

A new Scala version has just been released and you want to immediately
use it in your Lift project.

Solution
^^^^^^^^

You may find that the latest SNAPSHOT of Lift is built using the latest
Scala version. Failing that, and assuming you cannot wait for a build,
providing that the Scala version is binary compatible with the latest
version used by Lift, you can change your build file to force the Scala
version.

For example, assuming your `build.sbt` file is set up to use Lift 2.4
with Scala 2.9.1:

[source,scala]
---------------------------------------------------------------------
scalaVersion := "2.9.1"

libraryDependencies ++= {
  val liftVersion = "2.4" 
  Seq(
    "net.liftweb" %% "lift-webkit" % liftVersion % "compile->default"
  )    
}
---------------------------------------------------------------------

Let's assume that you now want to use Scala 2.9.2 but Lift 2.4 was only
built against Scala 2.9.1. Replace `%%` with `%` for the `net.liftweb`
resources and explicitly include the Scala version that Lift was built
against for each Lift component:

[source,scala]
--------------------------------------------------------------------------
scalaVersion := "2.9.2"

libraryDependencies ++= {
  val liftVersion = "2.4" 
  Seq(
    "net.liftweb" % "lift-webkit_2.9.1" % liftVersion % "compile->default"
  )    
}
--------------------------------------------------------------------------

Discussion
^^^^^^^^^^

In the example we have forced SBT to explicitly fetch the 2.9.1 version
of the Lift resources rather than allow it to compute the URL to the
Lift components.

Please note this only works for minor releases of Scala: major releases
break compatibility.

See Also
^^^^^^^^

* Mailing list discussion on https://groups.google.com/forum/?fromgroups#!topic/liftweb/b4cwfpr67a8[Lift and Scala 2.9.2].
* SBT https://github.com/harrah/xsbt/wiki/Getting-Started-Library-Dependencies[Library Dependencies] page describes `%` and `%%`.

