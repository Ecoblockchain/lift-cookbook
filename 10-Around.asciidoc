In and Around Lift
------------------

This section gives examples of working with Lift and other systems, such
as sending email or scheduling tasks.

Sending plain text email
~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to send a plain email from your Lift application.

Solution
^^^^^^^^

Use the `Mailer`:

[source,scala]
----------------------------------------
import net.liftweb.util.Mailer._
Mailer.sendMail(
  From("you@example.org"),
  Subject("Hello"),
  To("other@example.org"),
  PlainMailBodyType("Hello from Lift") )
----------------------------------------

Discussion
^^^^^^^^^^

`Mailer` sends the message asynchronously, meaning `sendMail` will
return immediately, so you don't have to worry about the time costs of
negotiating with an SMTP server. There's also a `blockingSendMail`
method if you want to wait.

By default, the SMTP server used will be `localhost`. You can change
this by setting the `mail.smtp.host` property. For example, add the line
`mail.smtp.host=smtp.example.org` to
`src/mail/resources/props/default.props`. Mailer also supports JNDI as a
source of email sessions.

The signature of `sendMail` requires a `From`, `Subject` and then any
number of `MailTypes`. In the example we added two: `PlainMailBodyType`
and `To`. You can add others including `BCC`, `ReplyTo` and
`MessageHeader` (a name and value pair), and you can add them multiple
times.

The default character set is UTF-8. If you need to change this replace
the use of `PlainMailBodyType` with
`PlainPlusBodyType("Hello from Lift", "ISO8859_1")`.

See Also
^^^^^^^^

* http://exploring.liftweb.net/master/index-F.html#toc-Appendix-F[Exploring
Lift], Appendix F.

Sending HTML email
~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to send an HTML email from your Lift application.

Solution
^^^^^^^^

Give `Mailer` a `NodeSeq` containing your HTML message:

[source,scala]
----------------------------------
import net.liftweb.util.Mailer._

val html = <html>
   <head>
     <title>Hello</title>
   </head>
   <body>
    <h1>Hello</h1>
   </body>
  </html>

Mailer.sendMail(
  From("Myself <me@example.org>"),
  Subject("Hello"),
  To("you@example.org"),
  html)
----------------------------------

Discussion
^^^^^^^^^^

An implicit converts the `NodeSeq` into a `XHTMLMailBodyType`. This
ensures the mime type of the email is "text/html". Despite the name of
XHTML, the message is to converted into a string for transmission using
HTML5 semantics.

The character encoding for HTML email, UTF-8, can be changed by setting
`mail.charset` in your Lift properties file.

Sending authenticated email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You need to authenticate with an SMTP server to send email.

Solution
^^^^^^^^

Set the `Mailer.authenticator` in `Boot` with the credentials for your
SMTP server and enable the `mail.smtp.auth` flag in your Lift props
file.

Modify `Boot.scala` to include:

[source,scala]
--------------------------------------------------------
import net.liftweb.util.Mailer._
import javax.mail.{Authenticator,PasswordAuthentication}

Mailer.authenticator = for { 
  user <- Props.get("mail.user")
  pass <- Props.get("mail.password") 
} yield new Authenticator {
  override def getPasswordAuthentication = 
    new PasswordAuthentication(user,pass) 
}
--------------------------------------------------------

In this example we expect the username and password to come from Lift
properties, so we need to modify
`src/main/resources/props/default.props` to include them:

[source,scala]
------------------------------------------
mail.smtp.auth=true
mail.user=me@example.org
mail.password=correct horse battery staple
mail.smtp.host=smtp.sendgrid.net
------------------------------------------

Discussion
^^^^^^^^^^

We've used Lift properties as a way to configure SMTP authentication.
This has the benefit of allowing us to enable authentication for just
some run modes. For example, if our `default.props` did not contain
authentication settings, but our `production.default.props` did, then no
authentication would happen in development mode, ensuring we can't
accidentally send email outside of a production environment.

But you don't have to use a properties file for this (the Lift Mailer
also supports JNDI). However, some mail services do require
`mail.smtp.auth=true` to be set.

See Also
^^^^^^^^

* The http://javamail.kenai.com/nonav/javadocs/com/sun/mail/smtp/package-summary.html[com.sun.mail.smtp description]

Sending email with attachments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to send an email with one or more attachments.

Solution
^^^^^^^^

Use Mailer's `XHTMLPlusImages` body types:

[source,scala]
--------------------------------------------------------------
val content = "Planet,Discoverer\r\n" + 
  "HR 8799 c, Marois et al\r\n" +
  "Kepler-22b, Kepler Science Team\r\n"

case class CSVFile(bytes: Array[Byte], 
  filename: String = "file.csv",
  mime: String = "text/csv; charset=utf8; header=present" )

val attach = CSVFile(content.mkString.getBytes("utf8"))

val body = <p>Please research the enclosed.</p>

val msg = XHTMLPlusImages(body, 
  PlusImageHolder(attach.filename, attach.mime, attach.bytes))

Mailer.sendMail(
  From("me@example.org",
  Subject("Planets"),
  To("you@example.org"), 
  msg)
--------------------------------------------------------------

Discussion
^^^^^^^^^^

`XHTMLPlusImages` can also accept more than one `PlusImageHolder` if you
have more than one file to attach.

Messages are sent using the "related" multi-part mime heading with
"inline" disposition.

See Also
^^^^^^^^

* Lift ticket 1197 to https://github.com/lift/framework/issues/1197[improve Mailer functionality for attachments]
* Wikipedia entry on http://en.wikipedia.org/wiki/MIME[Multipurpose Internet Mail Extensions (MIME)] Logging email rather than sending

Problem
^^^^^^^

You don't want email sent when developing your Lift application locally,
but you do want to see what would have been sent.

Solution
^^^^^^^^

The solution is to use `Mailer.devModeSend` and here is an example for
`Boot.scala`:

[source,scala]
---------------------------------------------------------
import net.liftweb.util.Mailer._
import javax.mail.internet.{MimeMessage,MimeMultipart}
  
def stringify(m: Any) = m match {
  case mm: MimeMultipart => mm.getBodyPart(0).getContent
  case otherwise => otherwise.toString
}

Mailer.devModeSend.default.set( (m: MimeMessage) => 
  logger.info("Would have sent "+stringify(m.getContent))
)
---------------------------------------------------------

This example is changing the behaviour of `Mailer` when your Lift
application is in developer mode (which it is by default). We are
logging a message only, and using a utility function to get the contents
of the first body part of the message. The key part is setting a
`MimeMessage => Unit` function on `Mailer.devModeSend`.

Discussion
^^^^^^^^^^

When developing an application it is inconvenient to have to worry about
setting up an SMTP server or inadvertently sending test messages to
users. The above is a useful way to know what would have been sent.

You can control how and if mail is sent using the `*ModeSend` functions
available for the different Lift RunModes (dev, staging, production,
profile, pilot and test). The default is to send email, except for
`testModeSend`, which only logs the send.

Run a task later
~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to schedule code to run later.

Solution
^^^^^^^^

Use `net.liftweb.util.Schedule`:

[source,scala]
------------------------------------------------
Schedule( () => println("doing it"), 30 seconds)
------------------------------------------------

This would cause "doing it" to be printed on the console after 30
seconds.

Discussion
^^^^^^^^^^

`Schedule` also includes a `schedule` method which will send a specified
actor a specified message after a given delay.

The above example makes use of the Lift `TimeHelpers`, but there are
variant calls that accept `Long` millisecond values.

Schedule returns a `ScheduledFuture[Unit]` from the Java concurrency
library, which allows you to `cancel` the activity.

See Also
^^^^^^^^

* https://github.com/lift/framework/blob/master/core/util/src/main/scala/net/liftweb/util/Schedule.scala[Schedule.scala]
source.
* http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledFuture.html[java.util.concurrent.ScheduledFuture] JavaDoc.
* Recipe for link:Run+tasks+periodically.html[Running tasks periodically]

Run tasks periodically
~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want a scheduled task to run periodically.

Solution
^^^^^^^^

Use `net.liftweb.util.Schedule` ensuring that you call `schedule` again
during your task to re-schedule it. For example:

[source,scala]
-------------------------------------------------
import net.liftweb.util.Schedule
import net.liftweb.actor.LiftActor
import net.liftweb.util.Helpers._

object MyScheduledTask extends LiftActor {
  
  case class DoIt()
  case class Stop()
  
  private var stopped = false
  
   def messageHandler = {  
     case DoIt => 
       if (!stopped) 
        Schedule.schedule(this, DoIt, 10 minutes)
       // ... do useful work here
     
     case Stop =>
       stopped = true
   }
}
-------------------------------------------------

The example creates a `LiftActor` for the work to be done. On receipt of
a `DoIt` message, the actor re-schedules itself before doing whatever
useful work needs to be done. In this way, the actor will be called
every 10 minutes.

The `Schedule.schedule` call is ensuring that `this` actor is sent the
`DoIt` message after 10 minutes.

To start this process off, possibly in `Boot.scala`, just send the
`DoIt` message to the actor.

To ensure the process stops correctly when Lift shuts down, we register
a shutdown hook in `Boot.scala` to send the `Stop` message to prevent
future re-schedules:

[source,scala]
----------------------------------------------------------------------------
LiftRules.unloadHooks.append( () => MyScheduledTask ! MyScheduledTask.Stop )
----------------------------------------------------------------------------

Discussion
^^^^^^^^^^

Without the `Stop` message your actor would continue to be rescheduled
until the JVM exits. This may be acceptable, but note that during
development with SBT, without the `Stop` message, you will continue to
schedule tasks after issuing the `container:stop` command.

Schedule returns a `ScheduledFuture[Unit]` from the Java concurrency
library, which allows you to `cancel` the activity.

See Also
^^^^^^^^

* https://github.com/lift/framework/blob/master/core/util/src/main/scala/net/liftweb/util/Schedule.scala[Schedule.scala] source.
* http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledFuture.html[java.util.concurrent.ScheduledFuture] JavaDoc.
* Chapter 1 of _Lift in Action_ includes a CometActor clock example that
uses `Schedule`, and further examples can be found in chapters 4 and 9.

Fetching URLs
~~~~~~~~~~~~~

Problem
^^^^^^^

You want to fetch a URL from inside your Lift app.

Solution
^^^^^^^^

Use _Dispatch_, "a library for HTTP interaction, from asynchronous GETs
to multi-part OAuth-enticated POSTs". Before you start, include the
dependencies in your `build.sbt` file:

[source,scala]
-------------------------------------------------
libraryDependencies ++= Seq(
 "net.databinder" %% "dispatch-core" % "0.8.8",
 "net.databinder" %% "dispatch-http" % "0.8.8",
 "net.databinder" %% "dispatch-tagsoup" % "0.8.8"
)
-------------------------------------------------

Databinder is structured into a set of modules (e.g., for oAuth and
Twitter). Above we're including a set for an example of fetching a URL
and extracting all the meta tags:

[source,scala]
------------------------------------------
import scala.xml.NodeSeq
import dispatch._
import dispatch.tagsoup.TagSoupHttp._

val page = url("http://www.w3.org/")

def metas(ns: NodeSeq) = ns \\ "meta"

val result: NodeSeq = Http(page </> metas)
------------------------------------------

The above produces:

[source,scala]
----------------------------------------------------------------------------------------
NodeSeq(<meta content="text/html; charset=utf-8" http-equiv="Content-Type"></meta>, 
 <meta content="width=device-width" name="viewport"></meta>,
 <meta content="The World Wide Web Consortium (W3C) is an international community where 
  Member organizations, a full-time staff, and the public work together to develop Web 
  standards." name="description"></meta>)
----------------------------------------------------------------------------------------

Discussion
^^^^^^^^^^

As URL fetching has latency, you will want to look at making the request
from an actor, a lazy-load snippet, via the various Dispatch executors
or similar mechanism.

_Dispatch_ offers a range of operators in addition to the `</>` XML one
used above. You can extract text, JSON, consume the stream, or throw
away the content. The _Periodic table_ gives a great high-level view of
what's available.

Related to _TagSoup_, _Dispatch_ also integrates with _JSoup_, which
includes functions for manipulating the real-world HTML you fetch.

See Also
^^^^^^^^

* http://dispatch.databinder.net/Dispatch.html[Dispatch].
* http://www.flotsam.nl/dispatch-periodic-table.html[Periodic table of Dispatch operators].
* http://dispatch.databinder.net/JSoup.html[JSoup Dispatch] documentation.

