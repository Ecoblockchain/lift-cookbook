[[Forms]]
Forms Processing in Lift
------------------------

This section gives examples of working with Lift forms in different
ways.  You'll find many of the examples in https://github.com/LiftCookbook/cookbook_forms[https://github.com/LiftCookbook/cookbook_forms].


[[PlainFormProcessing]]
Plain Old Form Processing
~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to process form data in a regular old-fashioned, non-Ajax, way.

Solution
^^^^^^^^

Extract form values with `S.param`, process the values, and produce some output.

For example, we can show a form, process an input value, and give a message back as a notice.  The template is a regular HTML form, with the addition of a snippet:


[source,html]
------------------
<form data-lift="Plain" action="/plain" method="post">
  <input type="text" name="name" placeholder="What's your name?">
  <input type="submit" value="Go" >
</form>
------------------

In the snippet we can pick out the value of the field "name" with `S.param("name")`:

[source,scala]
------------------
package code.snippet

import net.liftweb.common.Full
import net.liftweb.http.S
import net.liftweb.util.PassThru

object Plain {

  def render = S.param("name") match {
    case Full(name) =>
      S.notice("Hello "+name)
      S.redirectTo("/plain")
    case _ =>
      PassThru
  }

}
------------------

When you reach this template in your browser, the first time through there will be no parameter so we just pass back the form unchanged. You can then enter a value into the "name" field and submit the form. This will result in Lift processing the template again, but this time with a value for the "name" input.  The result will be your browser redirected to a page with a message set for display.


Discussion
^^^^^^^^^^

Manually plucking parameters from a request isn't making the best use of Lift, but sometimes you need to do it, and `S.param` is the way you can process request parameters.


The result of `S.param` is a `Box[String]`, and in the above example we pattern match on a value.  With more than one parameter you're probably see `S.param` used in this way:

[source,scala]
------------------
def render = {
  for {
    name <- S.param("name")
    pet <- S.param("petName")
  } {
    S.notice("Hello %s and %s".format(name,pet))
    S.redirectTo("/plain")
  }

 PassThru
}
------------------

If both "name" and "petName" are provided, the body of the _for_ will be evaluated.


Related function on `S` include:

* `S.params(name)` -- producing a `List[String]` for all the request parameters with the given name.
* `S.post_?`, `S.get_?`-- to see if the request was a GET or POST.
* `S.getRequestHeader(name)` -- giving the `Box[String]` for a header in the request with the given name.
* `S.request` -- to access the `Box[Req]` which gives you access to further HTTP-specific information about the request.

As an example of using `S.request` we could produce a `List[String]` for the values of all request parameters that have "name" somewhere in their parameter name:

[source,scala]
------------------
val names = for {
  req <- S.request.toList
  paramName <- req.paramNames
  if paramName.toLowerCase contains "name"
  value <- S.param(paramName)
} yield value
------------------

Note that by opening up `S.request` we can access all the parameter names via `paramNames` function on `Req`.

Screen or Wizard provide alternatives for form processing, but sometimes
you just want to pull values from a request, as demonstrated in this
recipe.

See Also
^^^^^^^^

_Simply Lift_ covers a variety of ways of processing forms.  See: http://simply.liftweb.net[http://simply.liftweb.net].




[[AjaxFormProcessing]]
Ajax Form Processing
~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to process a form on the server via Ajax, without reloading the
whole page.

Solution
^^^^^^^^

Mark your form as an Ajax form with `data-lift="form.ajax"` and supply a
function to run on the server when the form is submitted.

Here's an example of a form that will collect our name, and submit it via Ajax to the server:

[source,html]
---------------------------------------------------------
<form data-lift="form.ajax">
  <div data-lift="EchoForm">
    <input type="text" name="name" placeholder="What's your name?">
    <input type="submit">
  </div>
</form>

<div id="result">Your name will be echoed here</div>
---------------------------------------------------------

The following snippet will echo back the name via Ajax:

[source,scala]
---------------------------------------------------------
package code.snippet

import net.liftweb.util.Helpers._
import net.liftweb.http.SHtml.{text,ajaxSubmit}
import net.liftweb.http.js.JsCmd
import net.liftweb.http.js.JsCmds.SetHtml
import xml.Text

object EchoForm extends {

  def render = {

    var name = ""

    def process() : JsCmd = SetHtml("result", Text(name))

    "@name" #> text(name, s => name = s) &
    "type=submit" #> ajaxSubmit("Click Me", process)
  }
}
---------------------------------------------------------

When the button is pressed, the `process` function is called, which will return the
value of the `name` back to the element in the HTML with an ID of `result`.

Note you'll more typically see `s => name = s` written in the shorter form of `name = _`.

Discussion
^^^^^^^^^^

The `data-lift="form.ajax"` part of this recipe ensures that Lift adds the Ajax processing mechanics to the form.  This means the `<form>` element in the output will end up as something like:

[source,html]
---------------------------------------------------------
<form id="F2203365740CJME2G" action="javascript://"
  onsubmit="liftAjax.lift_ajaxHandler(
    jQuery('#'+&quot;F2203365740CJME2G&quot;).serialize(),
    null, null, &quot;javascript&quot;);return false;">
  ...
</form>
---------------------------------------------------------

In other words, when the form is asked to submit, Lift's will serialise the form via Ajax.  This means you don't necessarily need the submit button at all.  In this example with a single text field, if you omit the submit button you can trigger serialisation by pressing _return_.  This will trigger the `s => name = s` function which was bound in our regular `data-lift="EchoForm"` snippet. In other words, the value `name` will be assigned even without a submit button.

Adding in a submit button gives us a way to perform actions once all the field's functions have been executed.

Notice that Lift's approach is to serialise the form to the server, execute the functions associated with the fields, execute the submit function (if any), the return a JavaScript result to the client.  The default serialisation process is to use JQuery's `serialization` method on the form.  This serializes fields except submit buttons and file uploads.

Submit Styling
++++++++++++++

The `SHtml.ajaxSubmit` function generates a `<input type="submit">` element for the page. You may prefer to use a styled button for submit. For example, with Twitter Bootstrap, a button with an icon would require the following markup:

[source,html]
---------------------------------------------------------
<button id="submit" class="btn btn-primary btn-large">
  <i class="icon-white icon-ok"></i> Submit
</button>
---------------------------------------------------------

Pressing a `<button>` inside a form triggers the submit. However, if you bound that button with `Shtml.ajaxSubmit` the content, and therefore the styling, would be lost.

To fix this you can assign a function to a hidden field. This function will be called when the form is submitted just like any other field.  The only part of our snippet that changes is the CSS selector binding:

[source,scala]
---------------------------------------------------------
import net.liftweb.http.SHtml.hidden

"@name" #> text(name, s => name = s) &
"button *+" #> hidden(process)
---------------------------------------------------------

This will include a hidden field in the form, such as....

[source,html]
---------------------------------------------------------
<input type="hidden" name="F11202029628285OIEC2" value="true">
---------------------------------------------------------

...and when the form is submitted, the hidden field is submitted, and like any field, Lift will call the function associated with it: `process` in this case.

The effect is something like `ajaxSubmit`, but not exactly the same. In this instance we're appending a hidden field after the `<button>`, but you could place it anywhere on the form you find convenient. However, there's one complication: when is `process` called? Is it before the `name` has been assigned or after? That depends on the order the fields are rendered.  That's to say, in your HTML template, placing the button before the text field (and therefore moving the hidden field's position in this example), the `process` function is called before the name has been set.

There are a couple of ways around that.  Either, ensure your hidden fields used in this way appear late in your form, or make sure the function is called late with a `formGroup`:

[source,scala]
---------------------------------------------------------
import net.liftweb.http.SHtml.hidden
import net.liftweb.http.S

"@name" #> text(name, s => name = s) &
"button *+" #> S.formGroup(1000) { hidden(process) }
---------------------------------------------------------

The `formGroup` addition manipulates the function identifier to ensure it sorts later, resulting in the function `process` being called later than fields in the default group (0).

[NOTE]
Lift 2.6 and 3.0 may contain `ajaxOnSubmit`, which will give the reliability of `ajaxSubmit` and the flexibility of the hidden-field approach.  If you want to try it in Lift 2.5,
Antonio Salazar Cardozo has created a helper you can include in your project: https://gist.github.com/Shadowfiend/5042131[https://gist.github.com/Shadowfiend/5042131].



See Also
^^^^^^^^

<<AjaxFileUpload>> describes Ajax file uploads.

Form serialization is described at http://api.jquery.com/serialize/[http://api.jquery.com/serialize/].

Function order is discussed in the Lift Cool Tips wiki page: http://www.assembla.com/spaces/liftweb/wiki/cool_tips[http://www.assembla.com/spaces/liftweb/wiki/cool_tips].




[[JsonForms]]
Ajax JSON Form Processing
~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to process a form via Ajax, sending the data in JSON format.

Solution
^^^^^^^^

Make use of Lift's `jlift.js` JavaScript library and `JsonHandler` class.

As an example we can create a "motto server" that will accept an institution name and the institution's motto
and perform some action on these values. We're just going to echo the name and motto back to the client.

Consider this HTML, which is not in a form, but includes `jlift.js`:

[source,html]
---------------------------------------------------------
<html>
<head>
  <title>JSON From</title>
</head>
<body data-lift-content-id="main">

<div id="main" data-lift="surround?with=default;at=content">

  <h1>Json Form example</h1>

  <!-- Required for JSON forms processing -->
  <script src="/classpath/jlift.js" data-lift="tail"></script>

  <div data-lift="JsonForm" >

    <script id="jsonScript" data-lift="tail"></script>

    <div id="jsonForm">

      <label for="name">
        Institution
        <input id="name" type="text" name="name" value="Royal Society" />
      </label>

      <label for="motto">
        Motto
        <input id="motto" type="text" name="motto" value="Nullius in verba" />
      </label>

      <input type="submit" value="Send" />

    </div>

    <div id="result">
      Result will appear here.
    </div>

  </div>

</div>
</body>
</html>
---------------------------------------------------------

This HTML presents the user with two fields, a name and a motto, wrapped in a div called `jsonForm`. There's also a placeholder for some results, and you'll  notice a `jsonScript` placeholder for some JavaScript code.

The corresponding server-side code would be as follows:

[source,scala]
---------------------------------------------------------
package code.snippet

import scala.xml.{Text, NodeSeq}

import net.liftweb.util.Helpers._
import net.liftweb.util.JsonCmd
import net.liftweb.http.SHtml.jsonForm
import net.liftweb.http.JsonHandler
import net.liftweb.http.js.JsCmd
import net.liftweb.http.js.JsCmds.{SetHtml, Script}

object JsonForm {

  def render =
    "#jsonForm" #> ((ns:NodeSeq) => jsonForm(MottoServer, ns)) &
    "#jsonScript" #> Script(MottoServer.jsCmd)

  object MottoServer extends JsonHandler {

    def apply(in: Any): JsCmd = in match {
      case JsonCmd("processForm", target, params: Map[String, String], all) =>
        val name = params.getOrElse("name", "No Name")
        val motto = params.getOrElse("motto", "No Motto")
        SetHtml("result",
          Text("The motto of %s is %s".format(name,motto)) )
    }
  }
}
---------------------------------------------------------

Like many snippets, this Scala code contains a `render` method which binds to elements on the page. Specifically, `jsonForm` is being bound to a function that takes a `NodeSeq` (which are the input fields) and calls `SHtml.jsonForm`.  This method turns the div containing the fields into a form that will submit the values as JSON.

The `jsonScript` element is bound to JavaScript that will perform the transmission and encoding of the values to the server.

If you click the "Send" button and observe the network traffic, you'll see
the following sent to the server:

[source,javascript]
---------------------------------------------------------
{
  "command": "processForm",
  "params": {"name":"Royal Society","motto":"Nullius in verba"}
}
---------------------------------------------------------

This is the value of the `all` parameter in the `JsonCmd`.

The server will send back JavaScript to update the `results` div with
"The motto of the Royal Society is Nullius in verba".



Discussion
^^^^^^^^^^

The `JsonHandler` class and the `SHtml.jsonForm` method are together performing a lot of work for us.  The `jsonForm` method is arranging for form fields to be encoded as JSON and sent, via Ajax, to our `MottoServer` as a `JsonCmd`. In fact, it's a `JsonCmd` with a default command name of "processForm".

Our `MottoServer` class is looking for (matching on) this `JsonCmd`, extracting the values of the form fields, and echoing these back to the client as a `JsCmd` that updates a div on the page.

The `MottoServer.jsCmd` part is generating the JavaScript required to deliver the form fields to the server.  As we will see later, this is providing a general purpose function we can use to send different JSON values and commands to the server.

Notice also, from the network traffic, that the form fields sent are serialised with the names they are given on the page. There are no "F..." values sent which map to function calls on the server. A consequence of this is that anu fields dynamically added to the page will also be serialised to the server, where they can be picked up in the `MottoServer`.

The script `jlift.js` is providing the plumbing to make much of this happen.

Before going on, convince yourself that we're generating JavaScript on the server-side (`MottoServer.jsCmd`), which is executed on the client side when the form is submitted, to deliver results to the server.

Additional Commands
+++++++++++++++++++

In the above example we match on a `JsonCmd` with a command name of "processForm".  You may be wondering what other command can can supplied, or what the meaning of the "target" value is.

To demonstrate how you can implement other commands, we can add two additional buttons. These buttons will just convert the motto to upper case or lower case.  The server side `render` method changes as follows:

[source,scala]
---------------------------------------------------------
def render =
  "#jsonForm" #> ((ns:NodeSeq) => jsonForm(MottoServer, ns)) &
  "#jsonScript" #> Script(
    MottoServer.jsCmd &
    Function("changeCase", List("direction"),
      MottoServer.call("processCase", JsVar("direction"), JsRaw("$('#motto').val()"))
    )
  )
---------------------------------------------------------

The `JsonForm` is unchanged and we still include `MottoServer.jsCmd`: we still want to wrap the fields and submit them as before. We've added
an extra JavaScript function: it's a function called "changeCase", it takes one argument called "direction" and as a body calls the `MottoServer` with various parameters.  When it is rendered on the page it would appear as something like this:

[source,javascript]
---------------------------------------------------------
function changeCase(direction) {
  F299202CYGIL({'command': "processCase", 'target': direction, 'params':$('#motto').val()});
}
---------------------------------------------------------

The `F299202CYGIL` function (or similar name) is generated by Lift as part of `MottoServer.jsCmd`, and it is responsible for delivering data
to the server.  The data it is delivering, in this case, is a JSON structure consisting of a different command ("processCase"), a target of whatever
the JavaScript value `direction` evaluates to, and a parameter which is the result of the JQuery expression for the value
of the "#motto" form field.

When is the `changeCase` function called?  That's up to us, and one very simple way to call the function would be by this addition to the HTML:

[source,html]
---------------------------------------------------------
<button onclick="javascript:changeCase('upper')">Upper case the Motto</button>
<button onclick="javascript:changeCase('lower')">Lower case the Motto</button>
---------------------------------------------------------

When either of these buttons are pressed, the result will be a JSON value sent to the server with the command of "processCase" and the "direction" and "params" set accordingly.  All that is left is to modify our `MottoServer` to pick up this `JsonCmd` on the server:

[source,scala]
---------------------------------------------------------
object MottoServer extends JsonHandler {

  def apply(in: Any): JsCmd = in match {

    case JsonCmd("processForm", target, params: Map[String, String], all) =>
      val name = params.getOrElse("name", "No Name")
      val motto = params.getOrElse("motto", "No Motto")
      SetHtml("result",
        Text("The motto of %s is %s".format(name,motto)) )

    case JsonCmd("processCase", direction, motto: String, all) =>
      val update = if (direction == "upper") motto.toUpperCase else motto.toLowerCase
      SetValById("motto", update)

  }
}
---------------------------------------------------------

The first `JsonCmd` is unchanged. The second matches on the parameters sent and results in updating the form fields with an upper- or lower-case version of the motto.



See Also
^^^^^^^^

There are further examples of `JsonHandler` at http://demo.liftweb.net/json_more[http://demo.liftweb.net/json_more].

If you want to process JSON via REST, take a look at the examples at http://demo.liftweb.net/stateless_json[http://demo.liftweb.net/stateless_json].

_Lift in Action_, section 9.1.4 discusses "Using JSON forms with AJAX", as does section 10.4 of _Exploring Lift_ at http://exploring.liftweb.net[http://exploring.liftweb.net].






[[DisableCheckbox]]
Conditionally Disable a Checkbox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to add the `disabled` attribute to a `SHtml.checkbox` based on
a conditional check.

Solution
^^^^^^^^

Create a CSS selector transform to add the disabled attribute, and apply
it to your checkbox transform.

For example, suppose you have a simple checkbox...

[source,scala]
---------------------------------------------------------
class Likes {
  var likeTurtles = false
  def render =
    "#like" #> SHtml.checkbox(likeTurtles, likeTurtles = _ )
}
---------------------------------------------------------

...and a corresponding template:

[source,html]
---------------------------------------------------------
<!DOCTYPE html>
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
  <title>Disable Checkboxes</title>
</head>
<body data-lift-content-id="main">
<div id="main" data-lift="surround?with=default;at=content">

  <div>Select the things you like:</div>

  <form data-lift="Likes">
    <label for="like">Do you like turtles?</label>
    <input id="like" type="checkbox">
  </form>

</div>
</body>
</html>
---------------------------------------------------------

Further suppose you want to disable it roughly 50% of the time. We could do that
by adjusting the `NodeSeq` generated from `SHtml.checkbox`:


[source,scala]
----
package code.snippet

import net.liftweb.util.Helpers._
import net.liftweb.util.PassThru
import net.liftweb.http.SHtml

class Likes {
  var likesTurtles = false

  def disable =
    if (math.random > 0.5d) "* [disabled]" #> "disabled"
    else PassThru

  def render =
    "#like" #> disable( SHtml.checkbox(likesTurtles, likesTurtles = _) )
}
----

When the checkbox is rendered, it will be disbaled roughly half the time.

Discussion
^^^^^^^^^^

The `disable` method returns a `NodeSeq => NodeSeq` function, meaning
when we apply it we need to give it a
`NodeSeq`, which is exactly what `SHtml.checkbox` provides.

The `[disabled]` part of the CSS selector is selecting the disabled
attribute and replacing it with the value on the right of the `#>`,
which is "disabled" in this example.

What this combination means is that half the time the disabled attribute
will be set on the checkbox, and half the time the checkbox `NodeSeq`
will be left untouched because `PassThru` does not change the `NodeSeq`.

See Also
^^^^^^^^

<<PassThru>> describes the `PassThru` function.



[[MultiSelectBox]]
Use a Select Box with Multiple Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You want to show the user a number of options in a select box, and allow
them to select multiple values.

Solution
^^^^^^^^

Use `SHtml.multiSelect`:

[source,scala]
----
class MySnippet {
  def multi = {
    case class Item(id: String, name: String)
    val inventory = Item("a", "Coffee") :: Item("b", "Milk") ::
       Item("c", "Sugar") :: Nil

     val options : List[(String,String)] =
       inventory.map(i => (i.id -> i.name))

     val default = inventory.head.id :: Nil

     "#opts *" #>
       SHtml.multiSelect(options, default, xs => println("Selected: "+xs))
  }
}
----

The corresponding template would be:

[source,html]
---------------------------------------------------------
<div data-lift="MySnippet.multi?form=post">
  <p>What can I getcha?</p>
  <div id="opts">options go here</div>
  <input type="submit" value="Submit" />
</div>
---------------------------------------------------------

This will render as something like:

[source,html]
---------------------------------------------------------
<form action="/" method="post"><div>
  <p>What can I getcha?</p>
  <div id="opts">
   <select name="F25749422319ALP1BW" multiple="true">
     <option value="a" selected="selected">Coffee</option>
     <option value="b">Milk</option>
     <option value="c">Sugar</option>
   </select>
  </div>
  <input value="Submit" type="submit">
</form>
---------------------------------------------------------

Discussion
^^^^^^^^^^

Recall that an HTML select consists of a set of options, each of which
has a value and a name. To reflect this, the above examples takes our
`inventory` of objects and turns it into a list of (value,name) string
pairs, called `options`.

The function given to `multiSelect` will receive the values (ids), not
the names, of the options. That is, if you ran the above code, and
selected "Coffee" and "Milk" the function would see `List("a", "b")`.

Selected No Options
+++++++++++++++++++

Be aware if no options are selected at all, your handling function is
not called. This is described in ticket 1139. One way to work around
this to to add a hidden function to reset the list. For example, we
could modify the above code to be a stateful snippet and remember the
values we selected:

[source,scala]
---------------------------------------------------------
class MySnippet extends StatefulSnippet {

  def dispatch = {
    case "multi" => multi
  }

  case class Item(id: String, name: String)
  val inventory = Item("a", "Coffee") :: Item("b", "Milk") ::
    Item("c", "Sugar") :: Nil

  val options : List[(String,String)] = inventory.map(i => (i.id -> i.name))

  var current = inventory.head.id :: Nil

  def multi = "#opts *" #> (
    SHtml.hidden( () => current = Nil) ++
    SHtml.multiSelect(options, current, current = _)
  )
}
---------------------------------------------------------

Each time the form is submited the `current` list of IDs is set to
whatever you have selected in the browser. But note that we have started
with a hidden function that resets `current` to the empty list, meaning
that if the receiving function in `multiSelect` is never called, that
would mean you have nothing selected. That may be useful, depending on
what behaviour you need in your application.

Type-safe Options
+++++++++++++++++

If you don't want to work in terms of `String` values for an option, you
can use `multiSelectObj`. In this variation the list of options still
provides a text name, but the value is in terms of a class. Likewise,
the list of default values will be a list of class instances:

[source,scala]
---------------------------------------------------------
val options : List[(Item,String)] = inventory.map(i => (i -> i.name))
val current = inventory.head :: Nil
---------------------------------------------------------

The call to generate the multi-select from this data is similar, but
note that the function receives a list of `Item`:

[source,scala]
---------------------------------------------------------
"#opts *" #> SHtml.multiSelectObj(options, current,
  (xs: List[Item]) => println("Got "+xs) )
---------------------------------------------------------

Enumerations
++++++++++++

You can use `multiSelectObj` with enumerations:

[source,scala]
---------------------------------------------------------
object Item extends Enumeration {
  type Item = Value
  val Coffee, Milk, Sugar = Value
}

import Item._

val options : List[(Item,String)] =
  Item.values.toList.map(i => (i -> i.toString))

var current = Item.Coffee :: Nil

def multi = "#opts *" #> SHtml.multiSelectObj[Item](options, current,
  xs => println("Got "+xs) )
---------------------------------------------------------

See Also
^^^^^^^^

<<SelectOptionChange>> describes how to trigger a server-side action when a selection changes in the browser.

_Exploring Lift_, Chapter 6, "Forms in Lift", http://exploring.liftweb.net/[http://exploring.liftweb.net/].

Ticket relating to no options being selected: https://github.com/lift/framework/issues/1139[https://github.com/lift/framework/issues/1139]



[[FileUpload]]
File Upload
~~~~~~~~~~~

Problem
^^^^^^^

You want a snippet to allow users to upload a file to your Lift application.

Solution
^^^^^^^^

Use a `FileParamHolder` in your snippet, and extract file information from it when the form is submitted.

Starting with a form which is marked as "multipart=true":

[source,html]
---------------------------------------------------------
<html>
<head>
  <title>File Upload</title>
  <script id="jquery" src="/classpath/jquery.js" type="text/javascript"></script>
  <script id="json" src="/classpath/json.js" type="text/javascript"></script>
</head>
<body>
<form data-lift="FileUploadSnippet?form=post;multipart=true">
   <label for="file">
     Select a file: <input id="file"></input>
   </label>
   <input type="submit" value="Submit"></input>
</form>
</body>
</html>
---------------------------------------------------------

We can bind the form in a snippet:

[source,scala]
---------------------------------------------------------
package code.snippet

import net.liftweb.util.Helpers._
import net.liftweb.http.SHtml._
import net.liftweb.http.FileParamHolder
import net.liftweb.common.{Loggable, Full, Empty, Box}


class FileUploadSnippet extends Loggable {

  def render = {

    var upload : Box[FileParamHolder] = Empty

    def processForm() = upload match {
      case Full(FileParamHolder(_, mimeType, fileName, file)) =>
        logger.info("%s of type %s is %d bytes long" format (fileName, mimeType, file.length))

      case _ => logger.warn("No file?")
    }

    "#file" #> fileUpload(f => upload = Full(f)) &
      "type=submit" #> onSubmitUnit(processForm)
  }
}
---------------------------------------------------------

This allows you to access the `Array[Byte]` of the file in the `processForm` method when the form is submitted.


Discussion
^^^^^^^^^^

HTTP includes an encoding type of "multipart/form-data" which was introduced to support binary data uploads.  The `?form=post;multipart=true` parameters in the template mark the form with this encoding, and the HTML generated will look
like this:

[source,html]
---------------------------------------------------------
<form enctype="multipart/form-data" method="post" action="/fileupload">
---------------------------------------------------------

When the browser submits the form, Lift detects the "multipart/form-data" encoding and extracts any files from the request.  These are available as `uploadedFiles` on a `Req` object, for example:

[source, scala]
---------------------------------------------------------
val files : List[FileParamHolder] = S.request.map(_.uploadedFiles) openOr Nil
---------------------------------------------------------

However, as we're dealing with a form with a single upload field it's easier to use `SHtml.fileUpload` to bind the input to our `upload` variable.  Lift arranges for the function `f => upload = Full(f)` to be called when a file is selected and uploaded via this field. If the file is zero length, the function is not called.

The default behaviour for Lift is to read the file into memory and present it as a `FileParamHolder`.  In this recipe we're pattern matching on the fields of the `FileParamHolder` and simply printing out what we know about the file.  We're ignoring the first parameter which will be Lift's generated name for the field, but capturing the mime type, original filename and the raw data that was in the file.

You probably don't want to use this method for very large files.  In fact, `LiftRules` provides a number of size restrictions which you can control:

* `LiftRules.maxMimeFileSize` -- the maximum size of any single file uploaded (7MB by default).

* `LiftRules.maxMimeSize` -- the maximum size of the multi-part upload in total (8MB by default)

Why two settings?  Because when the form is submitted, there may be a number of fields on the form.  For example, in the recipe the value of the submit button is send as one of the parts, and the file is sent as another. Hence, you might want to limit file size, but allow for some field values, or multiple files, to be submitted.

If you hit the size limit an exception will be thrown from the underlying file upload library. You can catch the exception, as described in <<CatchException>>:

[source,scala]
---------------------------------------------------------
LiftRules.exceptionHandler.prepend {
  case (_, _, x : FileUploadIOException) =>
    ResponseWithReason(BadResponse(), "Unable to process file. Too large?")
}
---------------------------------------------------------

Be aware that the container (Jetty, Tomcat) or any web server (Apache, NGINX) may also have limits on file upload sizes.

[[UploadToDisk]]
Uploading a file into memory may be fine for some situations, but you may want to upload larger items to disk and then processes them in Lift as a stream.  Lift supports this via the following setting:

[source,scala]
---------------------------------------------------------
LiftRules.handleMimeFile = OnDiskFileParamHolder.apply
---------------------------------------------------------

The `handleMimeFile` variable expects to be given a function that takes a field name, mime type, filename and `InputStream` and returns a `FileParamHolder`.  The default implementation of this is the `InMemFileParamHolder`, but changing to `OnDiskFileParamHolder` means Lift will write the file to disk first. You can of course implement your own handler in addition to using `OnDiskFileParamHolder` or `InMemFileParamHolder`.

With `OnDiskFileParamHolder`, the file will be written to a temporary location (`System.getProperty("java.io.tmpdir")`) but it's up to you to remove it when you're done with the file. For example, our snippet could change to:

[source,scala]
---------------------------------------------------------
def processForm() = upload match {

  case Full(content : OnDiskFileParamHolder) =>
    logger.info("File: "+content.localFile.getAbsolutePath)
    val in: InputStream = content.fileStream
    // ...do something with the stream here...
    val wasDeleted_? = content.localFile.delete()

  case _ => logger.warn("No file?")
}
---------------------------------------------------------

Be aware that `OnDiskFileParamHolder` implements `FileParamHolder` so would  match the original `FileParamHolder` pattern used in the recipe. However, if you access the `file` field of `OnDiskFileParamHolder`, you'll bring the file into memory, which would defeat the point of storing it on disk to process it as a stream.

If you want to monitor the progress of the upload on the server side, you can. There's a hook in `LiftRules` which called as the upload is running:

[source,scala]
---------------------------------------------------------
def progressPrinter(bytesRead: Long, contentLength: Long, fieldIndex: Int) {
  println("Read %d of %d for %d" format (bytesRead, contentLength, fieldIndex))
}

LiftRules.progressListener = progressPrinter
---------------------------------------------------------

This is the progress of the whole multi-part upload, not just the file being uploaded.  In particular, the `contentLength` may not be known (in which case it will be `-1`), but if it is known it is the size of the complete multi-part upload. In the example in this recipe that would include the size of the file, but also the submit button value.  This also explains the `fieldIndex`, which is a counter as to which part is being processed. It will take on the values of 0 and 1 for the two parts in this example.


See Also
^^^^^^^^

The HTTP file upload mechanics are described in RFC 1867, _Form-based File Upload in HTML_:
http://tools.ietf.org/html/rfc1867[http://tools.ietf.org/html/rfc1867]

<<RestBinaryData>> discusses file upload in the context of a REST service.

See <<AjaxFileUpload>> for an example of an Ajax file upload through integration with a JavaScript library, providing progress indicators and drag-and-drop support.




