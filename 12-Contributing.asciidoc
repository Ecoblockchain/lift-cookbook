Contributing, Bug Reports & Getting Help
----------------------------------------

You'd Like Some Help
~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You're stuck on something in Lift and you'd like some help.

Solution
^^^^^^^^

Ask a question on the Lift mailing list at https://groups.google.com/group/liftweb[https://groups.google.com/group/liftweb].

Discussion
^^^^^^^^^^

You will find some information about Lift on StackOverflow, Quora and elsewhere, but the mailing list is _the_ place to go to get help and support. You can search the archive to see if your question has already been addressed, but questions are very welcome as it helps the Lift community understand what users need and what might be causing problems or need explanation. Much of what you're reading here originates from questions that have been asked on the mailing list.

New members to the mailing list are moderated to help reduce spam. This means the first time you post your message may take a few hours to show up.

See Also
^^^^^^^^

The Lift community is one of the things that makes Lift what it is. Please take a look at http://liftweb.net/community[http://liftweb.net/community] before posting: you'll get the best response with a polite question.

If you need paid consulting, development or SLA-backed support, there's a list of organizations on the Wiki at https://www.assembla.com/spaces/liftweb/wiki/Commercial_Support[https://www.assembla.com/spaces/liftweb/wiki/Commercial_Support].


How to Report Bugs
~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You've found a bug and want to report it.

Solution
^^^^^^^^

Discuss your findings on the Lift mailing list, saying what you're
seeing, and what you'd expect to see.

By all means look at the existing tickets to see if your issue is there or recently fixed, but please do not
raise a ticket unless asked to do so by a Lift committer on the mailing list.

Discussion
^^^^^^^^^^

[quote, David Pollack, http://lift.la/expected-behavior-in-the-lift-community]
____
If Lift is not behaving as you expect, please ask questions about what
you're seeing. The ideal form of these questions is "When I do X, my
Lift app does Y, but I expect it to do Z, why?" This provides a set of
language to discuss your application and the way that Lift responds to
requests. Perhaps there's a way of improving Lift. Perhaps there's a
concept that's different in Lift than you might be used to. Perhaps
there's a documentation issue that can help bridge the gap between what
Lift is doing and what you expect it to do. Most importantly, just
because Lift is behaving differently than you expect it to, it's not
necessarily a bug in Lift.
____

A great way to get help with the issue you have, or getting a bug fixed, is to produce a small example to illustrate the problem and posting it on GitHub. The key is to provide instructions so someone can run the example and see exactly what you see without having to jump though hoops.


See Also
^^^^^^^^

You'll find a list of tickets at http://ticket.liftweb.net/[http://ticket.liftweb.net/].

If you're asked to, or want to, post example code there's a guide at http://www.assembla.com/wiki/show/liftweb/Posting_example_code[http://www.assembla.com/wiki/show/liftweb/Posting_example_code].

If you've found a bug, and you're asked to create a ticket, the main thing to do is to include a link to the mailing list discussion of the issue, as described at http://www.assembla.com/wiki/show/liftweb/Creating_tickets[http://www.assembla.com/wiki/show/liftweb/Creating_tickets]. 


[[LiftCodeContributions]]
Contributing Small Code Changes and ScalaDoc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You have a small change or ScalaDoc improvement you'd like incorporated into Lift.

Solution
^^^^^^^^

You can issue pull requests against the Lift source providing your change meets one of the following requirements:

* It's change to a comment.
* It's example code.
* It's a _small_ change, enhancements, or bug fix to Lift.

Your pull request must include an edit to add your signature to the bottom of the `contributors.md` file.


Discussion
^^^^^^^^^^

Historically Lift had a strict contributor policy of simply not accepting any code contributions except from committers who had signed an agreement to assign copyright to the Lift project.  This allowed corporations wanting to adopt Lift to do so without litigation concerns.

The safety is still there, now via the requirement for a signature on the contributors file, which reads:

[quote]
____
By submitting this pull request which includes my name and email address (the email address may be in a non-robot readable format), I agree that the entirety of the contribution is my own original work, that there are no prior claims on this work including, but not limited to, any agreements I may have with my employer or other contracts, and that I license this work under an Apache 2.0 license.
____

What's a small change? That's a good question, and if you're unsure, talk about your proposed change on the mailing list.

See Also
^^^^^^^^

This contribution policy was introduced in November 2012, and can be read about at http://www.lift.la/blog/new_contribution_policy[http://www.lift.la/blog/new_contribution_policy].

The `contributors.md` file is found at: https://github.com/lift/framework/blob/master/contributors.md[https://github.com/lift/framework/blob/master/contributors.md].

The Lift source is on GitHub at https://github.com/lift/[https://github.com/lift/].  The _framework_ project is probably the one you want, although you'll also find Git repositories for examples and Lift web sites there.

GitHub provide an introduction to pull requests at https://help.github.com/articles/using-pull-requests[https://help.github.com/articles/using-pull-requests].

<<modules>> describes how to share code of any size via Lift modules.


[[wiki]]
Contributing Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You'd like to contribute documentation to Lift.


Solution
^^^^^^^^

Update or add to the Lift wiki at https://www.assembla.com/wiki/show/liftweb[https://www.assembla.com/wiki/show/liftweb].

You'll need to sign in, or create a free account, with Assembla, the company that hosts the wiki. You then need to become a _watcher_ of the Lift wiki, which is offered as a link on the top right of the Lift wiki page.  As a watcher you can edit pages and create new pages.


Discussion
^^^^^^^^^^

If you're unsure about a change you'd like to make, just ask for feedback on the Lift mailing list. 


One limitation of the watcher role on Assembla is that you cannot move pages. If you create a new page in the wrong section, or want to reorganise pages, you'll need to ask on the Lift mailing list for someone with permissions to do that for you.


See Also
^^^^^^^^

The markup format for the Wiki pages is Textile. A reference guide can be found at: http://redcloth.org/hobix.com/textile/[http://redcloth.org/hobix.com/textile/].


How to Add a New Recipe to this Cookbook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You'd like to add (or change) a section or chapter to this cookbook.

Solution
^^^^^^^^

If you're comfortable using Git, you can fork the repository and send a
pull request.

Alternatively, download a template file, write your recipe, and email
to the Lift mailing list at https://groups.google.com/group/liftweb[https://groups.google.com/group/liftweb].  

You can find the template file at: https://raw.github.com/d6y/lift-cookbook/master/template.asciidoc[https://raw.github.com/d6y/lift-cookbook/master/template.asciidoc].

Discussion
^^^^^^^^^^

Anything you've puzzled over, or things which have surprised you, impressed you or are non-obvious are great topics for recipes. Improvements, discussions and clarifications of existing recipes are welcome too.

The cookbook is structured using a markup language called Asciidoc. If you're familiar with Markdown or Textile, you'll find similarities. For the cookbook you only need to know about section headings, source code formatting and links.  Examples of all of these are in the `template.asciidoc` file.

To find out where to make a change you need to know that each chapter is a separate file, and each recipe is a section in that file.  

Licensing
+++++++++

This Cookbook is built upon the contributions of many people, under a Creative Commons license. Your contribution will need to be in agreement with that, but there is also a version produced by O'Reilly (perhaps you're holding that version?), and O'Reilly also need the rights to produce the book. Consequently, each contribution will need to include the following: 

[quote]
____
By submitting this content, I understand and agree that:

* I am the owner of the content I am submitting.

* The the content is original work, except for pre-existing material which is in the public domain.

* The text can be used and modified and published in the web version of this text under the Creative Commons Attribution Noncommercial No Derivative Works license.

* O'Reilly will have other exclusive rights to print, copy, publish, market, display, distribute, and provide access to the content.

* Any author royalties will be passed to charity.
____

The best way to supply that will be in your commit message in Git, or via email if you've send a file that way.


See Also
^^^^^^^^

The source to this book is at: https://github.com/d6y/lift-cookbook/[https://github.com/d6y/lift-cookbook/].

The AsciiDoc cheetsheet at http://powerman.name/doc/asciidoc[http://powerman.name/doc/asciidoc] is a quick way to get into AsciiDoc, but if you need more, the AsciiDoc home page has the details: http://www.methods.co.nz/asciidoc/[http://www.methods.co.nz/asciidoc/].

GitHub provide an introduction to pull requests at https://help.github.com/articles/using-pull-requests[https://help.github.com/articles/using-pull-requests].

<<wiki>> describes other ways to contribution documentation to Lift.


[[modules]]
Sharing Code in Modules
~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

You have code you'd like to share between Lift projects.

Solution
^^^^^^^^

Create a Lift module, and then reference the module from your Lift projects.

As an example, let's create a module to embed the Snowstorm snow fall effect on every page in your Lift web application (please don't do this). 

There's nothing special about modules: they are code, packaged and used like any other dependency. What makes them possible is the exposure of extension points via `LiftRules`. The main convention is to have an `init` method that Lift applications can use to initialize your module.

For our snow storm we're going to package some JavaScript and inject the script onto every page.

Starting with the `lift_blank` template downloaded from liftweb.net, we can remove all the source and HTML files as this won't be a runnable Lift application in itself. However, it will leave us with the regular Lift structure and build configuration.

Our module will need the Snowstorm JavaScript file from https://github.com/scottschiller/snowstorm/[https://github.com/scottschiller/snowstorm/] copied as `resources/toserve/snowstorm.js`.  This will place the JavaScript file on the classpath of our Lift application.

The final piece of the module is to ensure the JavaScript is included on every page:

[source,scala]
--------------------------------------------------------------
package net.liftmodules.snowstorm

import net.liftweb.http._

object Snowstorm {
	
 def init() : Unit = {

  ResourceServer.allow {
     case "snowstorm.js" :: Nil => true
  }

  def addSnow(s: LiftSession, r: Req) = S.putInHead(
    <script type="text/javascript" src="/classpath/snowstorm.js"></script> )

  LiftSession.onBeginServicing = addSnow _ ::  LiftSession.onBeginServicing

 }

}
--------------------------------------------------------------

Here we are plugging into Lift's processing pipeline and adding the required
JavaScript to the head of every page.

We modify `build.sbt` to give the module a name, organisation and version number.  We also can remove many of the dependencies and the web plugin as we only depend on the web API elements of Lift:

[source,scala]
--------------------------------------------------------------
name := "snowstorm"

version := "1.0.0"

organization := "net.liftmodules"

scalaVersion := "2.9.1"

resolvers ++= Seq(
   "snapshots" at "http://oss.sonatype.org/content/repositories/snapshots",
   "releases" at "http://oss.sonatype.org/content/repositories/releases"
)

scalacOptions ++= Seq("-deprecation", "-unchecked")

libraryDependencies ++= {
  val liftVersion = "2.5-M3"
  Seq(
    "net.liftweb" %% "lift-webkit"  % liftVersion  % "compile"
  )
}
--------------------------------------------------------------

We can publish this plugin to the repository on disk by starting SBT and typing:

---------------------------
publish-local
---------------------------

With our module built and published, we can now include it in our Lift applications. To do that, modify the Lift application's `build.sbt` to reference this new "snowstorm" dependency:

[source,scala]
--------------------------------------------------------------
libraryDependencies ++= {
  val liftVersion = "2.5-M3"
  Seq(
  ...
  "net.liftmodules" %% "snowstorm" % "1.0.0",
  ...
--------------------------------------------------------------

In our Lift application's `Boot.scala` we finally initialise the plugin:

[source,scala]
--------------------------------------------------------------
import net.liftmodules.snowstorm.Snowstorm
Snowstorm.init()
--------------------------------------------------------------

When we run our Lift application, white snow will be falling on every page, supplied by the module.

Discussion
^^^^^^^^^^

The module is self contained: there's no need for users to copy JavaScript files around or modify their templates.  To achieve that we've made use of `ResourceServer`.  When we reference the JavaScript file via `/classpath/snowstorm.js`, Lift will attempt to locate `snowstorm.js` from the classpath.  This is what we want for our Lift application because `snowstorm.js` will be inside the module JAR file.

However, we do not want to expose all files on the classpath to anyone visiting our application. To avoid that, Lift looks for resources inside a `toserve` folder, which for our purposes means files and folders inside `src/main/resources/toserve`.  You can think of `/classpath` meaning `toserve` (although, you can change those values via `LiftRules.resourceServerPath` and `ResourceServer.baseResourceLocation`).

As a further precaution you need to explicitly allow access to these resources.  That's done with:

[source,scala]
--------------------------------------------------------------
ResourceServer.allow {
  case "snowstorm.js" :: Nil => true
}
--------------------------------------------------------------

We're just always returning `true` for anyone who asks for this resource, but we could dynamically control access here if we wanted.

`S.putInHead` adds the JavaScript to the head of a page, and is triggered on every page by `LiftSession.onBeginServicing` (also discussed in <<OnSession>>). We could make use of `Req` here to restrict the snow storm to particular pages, but we're adding it to every page.

Hopefully you can see that anything you can do in a Lift application you can probably turn into a Lift module.  A typical approach might be to have functionality in a Lift application, and then factor out settings in `Boot` into a module `init` method.  For example, if you wanted to provide REST services as a module, that would be possible and is an approach taken by the Lift Paypal module.

Making your Module Available
++++++++++++++++++++++++++++

If you do want your module to be used by a wider audience, you need to publish it to a public repository, such as Sonatype or CloudBees. You'll also want to keep your module up-to-date with Lift releases. There are a few conventions around this.

One convention is to include the Lift version as part of the module version number.  For example, version 1.0.0 of your module for Lift 2.5 would be "2.5-1.0.0".  This is verbose but makes it clear which version of your module is compatible with which versions of Lift.  It also means you need to keep your module up-to-date with Lift releases.

One way to ease that is to make a modification to your module build to allow the Lift version number to change. This makes it possible to automate the build when new versions of Lift are released. To do that, create `project/LiftModule.scala` in your module:


[source,scala]
--------------------------------------------------------------
import sbt._
import sbt.Keys._

object LiftModuleBuild extends Build {
  val liftVersion = SettingKey[String]("liftVersion", 
    "Version number of the Lift Web Framework")
  val project = Project("LiftModule", file("."))
}
--------------------------------------------------------------

This defines a setting to control the Lift version number.  You use it in your module `build.sbt` like this:

[source,scala]
--------------------------------------------------------------
name := "snowstorm"

liftVersion <<= liftVersion ?? "2.5-SNAPSHOT"

version <<= liftVersion apply { _ + "-1.0.0-SNAPSHOT" }

...

libraryDependencies <++= liftVersion { v =>
  "net.liftweb" %% "lift-webkit" % v % "compile->default" ::
  Nil
}
--------------------------------------------------------------

What this gives you is a way for the version of your module to depend on the `liftVersion` value.  This in turn can be set via a script.  This is what we do to publish a range of Lift Modules after each Lift release, as described at https://www.assembla.com/spaces/liftweb/wiki/Releasing_the_modules[https://www.assembla.com/spaces/liftweb/wiki/Releasing_the_modules].

Don't forget to announce your module on the Lift mailing list.

Debugging Your Module
+++++++++++++++++++++

When working on a module and testing it in a Lift application, it would be a chore to have to publish your module each time you changed it. Fortunately, SBT allows your Lift application to depend on the source of a module.  To use this, change your Lift project to remove the dependency on the published module and instead add a local dependency by creating `project/LocalModuleDev.scala`:


[source,scala]
------------------------------------
import sbt._
object LocalModuleDev extends Build {
  lazy val root = Project("", file(".")) dependsOn(google)
  lazy val snow = ProjectRef(uri("../snowstorm"), "LiftModule")
}
------------------------------------

We are assuming that the snowstorm source can be found at `../snowstorm` relative to the Lift application we are using. With this in place, when you build your Lift project, SBT will automatically compile and depend on changes in the local `snowstorm` module. 


See Also
^^^^^^^^

Originally Lift included a set of modules, but these have been separated out to individual projects at https://github.com/liftmodules/[https://github.com/liftmodules/].  The Lift contributor policy outlined in <<LiftCodeContributions>> doesn't apply to Lift modules: you're free to contribute to these modules as you would any other open source project.

The Lift wiki pages for modules can be reached via http://liftmodules.net[http://liftmodules.net].

The Snowstorm project ("setting CPUs on fire worldwide every winter since 2003") is at: https://github.com/scottschiller/snowstorm/[https://github.com/scottschiller/snowstorm/] and the module developed for this recipe is at https://github.com/LiftCookbook/snowstorm-example-module[https://github.com/LiftCookbook/snowstorm-example-module].

To publish to Sonatype, take a look at their guide: https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide[https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide]. CloudBees offer an open source repository, which you can learn about via http://www.cloudbees.com/foss/foss-dev.cb[http://www.cloudbees.com/foss/foss-dev.cb].

There are other ways to structure common code between Lift applications. For an example that uses SBT modules and Git, see the mailing list discussion on "Modularize Lift Applications" at https://groups.google.com/d/msg/liftweb/7GA5t0lefzI/c1wf6W1keDcJ[https://groups.google.com/d/msg/liftweb/7GA5t0lefzI/c1wf6W1keDcJ].



